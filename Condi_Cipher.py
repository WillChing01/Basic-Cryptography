#condi cipher

c='''TVVERECYFTLXBXHWEILAXFNAAFVHVVJKZMKSDQYDVHRELNLHGNLCOIAKQNSCOIEZHGVAZHGBAAABEOMUCGRLCJQNSLAWQVBRDPLCGJLVGJWVTXGRXGBQAHMYAZKKMAQVMZILAGJKFQNLYLIRKJHPHKBXKTSAPHYFZIDEVUVRWZVEAWQAQFAOWXLAFTNEKZWZTJGHIQECGZUMWTRAKSCTPHLNXHTCUVHQHIKKEAJFTJRVVETNZPZAGBASHTPPRKLZEDWLWUAOETCVBHMDRJJHRWZGPWJLIRHHURLZQNDDRARTSOSTOTILZWVPATELLIBEAZJVILAXKFTJTTRHLZIRCVTFVIGGNMNAAHCYRIRSLATANOUQTHEAYNIVBRHPLCGKDRNQNYLIRAAWEQREMWCGRLCUAITVVAVZXYPTIDCLLWLJVTWAMUDZCKIKVUAIAGWPLZHEYRKXFMZELIMJKFVHDAPYSCBLMFLSJJVIXGHFZJNWLSGDLNMARCUEQNAZVRSEFNMAFVZVHZLGZPZMEAMWZDTCQNSLHWPLRFAQTSEAYRQQVVLUTERHLZIRCVAVTVVREJFKOZHLARYDHHXLMUHEBCDNDTVDMRTLVLAZRQMJVTCPTHDDCLATNCAHGTESQHIFRALAWTFTJJELGAFLTRPQAOKLTCGNAUVAELSCLAACHREROVSCWQNNSRBPEZVRSTNVFXTRVTPWHWQAGWKEEHWJPXTVDZGZTOFLVBNGMHRKFYAKVZVCMCBLSFLSOQNSLMIHXIBQEFHWEVXGOABEAQLAANZZQGFFTTWLRAPSLEFUFFMCILMFLSKAAWTBLKLNMAORQNNLMIVHDHGAPYDNMYAQUHXLMUHEBHNAIOAWPMITVMFNANMAFRWTBLFFNEEXGVPAXQAGKHZQARZZIGFRATYWWRAFWDGCBTLXQNMLBLMIWZFORYHMKKWPPLAKVEZRAARAJNTHAKBCGLEAGRQQWTEJELNEHTVOBRDRQNRVFOPKGVVSWVRVHXQQHLHIJTWZGPWEQEAWQNSFLBSKWVXUFGDSAZRIFTHDMZMWTIEBCGDZVHUOXVHLAFBQGVFTHHNBLMGURWHHXKGSTLNMEDCUEFNMAFUYPJFSKQAVFSEPMBAKGDHTVLLJFAPNQUBTMWCGRLCGHXBIWWQNDHLJCTWZTBGHXLSHKJXUNTHAWLAMFNMAFRVVAOJEGRMKKNKFMWHRROKAAURLAWGNWFTVKTRWKWQMHTMCBLMFLSGTVZVJKFGGCETVVIKTNHJZBRRTJLAKVQNLPTGIVBRHPLAHQYJIREHWAUAFGHJFSVKGSKSPTTVEKOWLEMUBLMFLSYHLELNXVFHGQAFRNMLMHEVXGEHWZVEPZIVBRHELCGQNAVEZRQELNXVILAGQVBRHPLAGDHPKWWFBWBBLQBQQQAFRLMGQBRDNBBTLAGTVIVIMQVVJVMLOZGYFGLAYAQFMBOOKPSTVDVEPYMLAZSMWKGTLGVZQNSLAWBHRQGLSGJVIMQVKTNRHLZIRCVTNDDZIRNVOQAFENIOABEALAMBHRQGOFIOTZQHQBQFMCBLMFLAFHLVITKRGQATEHQDNHLKOFIQGRZZRQIVXGRHXJWMGEDVXTNVTLAWTILWHWKWWKGDALATFBAQMCIJURXYPVKXFTXDNYLVGTHMMALAHTDOLHWHDRKHTHHXQNTLAWTVVVIAQVVWVZINNBWOKPRTGLAYAQXMFTMAPYJKGARHIVWFTVIERECKJYBUFTDSPYJKGRXJFSFMCBLMFLSQDOCAZJTVBTMUBLWVVHQHXAPNSTXTVFVBTVWRQGYLVGDLAHXTMUILWVVHQHILAWLAMZPQNLANOZGJXMWTRMMMUTPHLNXHTCUVDKOLIQQVZZRQYRKXFSLARJVMLOZGWVHQHUAPYQNAYAQUTVAGDMBHAPHZLTTFXMCLWTOGRQQKJXDOMCBLMFLALHRZQEQBQUQPWEUPKVIAPUJKGSUFKJRVWKBXSLAPQVIQTRFRMLOZGSOSTCHTCGZPLHRVRUKARLJRECMTGTVITOIPBMCHZVHNHRNHURHLUPKQNMLKSALHBFLAMRXPLUVMWHRRIPSRHVBRDUQNKTVIAHWFLANAIVAZLTGREERBTTOGLAIHBFLAMBRMQTOFNMMOSTYHTCGQNOPFHLAPKWTEWXKXFTQMPAVUANLKGLAAAQXMBWOKPSDHUHVVJKZMSJPVRZZWVAFWDLAFVLNTGOIPTHAXSAPJHKZDKNWRUBANOBGQHIFRTQLATZNMUCGRLCAQNSAPKRQEPVXGRWQYQQNYVKTHUKHKGVVRILATPMPBRFNMAFVVDOVVAKHGWUHVVHWHXTIKCMQSLLGVNJTVSKVJUBULAGVXTBJFPTJSTSLAYGPNGUFIRAQNEMIWKCPPRRREPELTUTMZMLAYVHQNMYAOTMCBLSFLSJSSMCBTMFLSKHXGRGUKLHWXNRVLIRRYFFLVBNGRTVVNVOKFZHZWTNTEAEZIELYHEZAVHJTLAWRQQABEJBWBTMUKGHDGFHZJAMHWJREXHZBRBXNZMLARVHQNMYAOTMUTRMDMCTPHLNXHTCUSWKJWLNVNXHHDUMJVTPHWTEVRHJEXVTGWLABEWMWCGRLCJFTFLAKOKSWTSAPHRQEMBAGBASWWTHALHTCVQPWEUIVDXTEVKYABEZSWCGRLCJLZJWFZJVRCGHVRPTVGPDARNPVKXFTFTMLAYBHRQCQNXVLATKUHWABENLAALWKTBFKTWTHEAYTVVVIMQVVWVZINABWOGPRHXLWVRRSMCILMFLSVQNSAPKVURUAYFTXLAKWQMZTGCLALDHFHXMBUYMQFLSVIGGDLAMNMAFVJVMLOLGFVAKTNAJZBRFTJJFSJKGSKSATAFWJTAAFWPLABZHKRERHTCJHVVJKTCLATPVKXFTJDNYLAWSVRBGAZGTHLMWCGRLCQQNSAPKRQEGFBWSWWTHALHTCVQNOAPKRQEHRERNXVEHWRELZIRCQZMLAGSKRELYTVELZABEUEAAQMHZWTSRMLAYVIGXRBSABEJLATTDZHHVTEAGOZQGANOTOTHJWDDHTCPHLHTRMALAWJFODDMLMWABEOLAAOPXELTCKQOTNGJQJNOPNVFTJFIQLATHGBANOTVBBIAWNYKHRBHHRBWAADJFGPABIZDLTBDCQNSVXTWWFTWZDNWQYDDSSLZDHLHIVXGDABEZMWCGGLCJDTEPRKLKANOBWHMAPVBROTVHQHSAPYLIADRSLYHPLAGPBQGLAWYLKXNDOGTMLAYXHRQGTVLOZVEVOSPUXTLAILSEVSTLATRBZLWGWWFMQAFWQNEGVEAHAQFMBWOKPSHWKGFRPLAWEWWHTIVNMDVKUFWZVJFVITVSKMDWLFIQNLLTLGHHXJGFEGLRJVTTBNKPFQYDRVXTLDHIVWWAFWIZMLATJFOGRQDFHKQVBRHPLCUQNANMAFUESTLNCLAXHXLWVPQNDHDMPWGKINZTCSWTGLTOULQNSTILZVVXHXNBBTRXTFTJZILAKJFSJGPNRRZDTPHHEAQTVZJSABEABWILMUHEBLCLAGITPDQTBGHUCLAEDHFHVVZJQGVRJEGRMKKNFZMVHRYHVBGBOQBSHGLHHKWVKKFTJTSMAGMAWDJBNVVEDOHTCGHXTFDTVFHWLAHMNTGKPPTGLAYAQBBWOKESNVUQKTQNATDLSLEHEQNHALAWBHRQGHQAPHJFSKTNXTIOOTVDDMGGVXUFOCVLQAFETSLHYPVZJQGVVTMLATBHRQGQNXLHWELNXVVTBEAYKPXELTCKQORSWEAGHXGNRXXQLATWLMNRURPAQNNHHURWWDFBWAFRESHLLAHJFJDDMLMSHCEWHAZDMGGVFEDRAFTAZDNKGCLHEVLLRLDIYLAGHVZBXVPAFWIPRTBTTUMGKIMVWQPFZRKSWUHMVREVHWWGVAHZVRSBWVZIAABWOKPPNVTBEDVPAPAXPFHLAPZWTEWVFHLWVCZMLHXLIBBVYWMUQERVTGQAFWVVEAHMVRHHLAWBHRQCGLRTEFWEQLZNLARTEVXKWGKNNZTCSLFGHTCHQNOAPKREETVLUFQGVEZMLHZPLTKAMHPHYRTHLALLGAQGNTKFDBUIKSTMSZVHPROKAKVHQHYSNSNIZRHLAPHQNNBLFNIPIQEJETEVXKTHHRHMEHVBGBQQHXVGXHFGDBBLATANLKXLMGTFBHPLEGPBQGFOILNMDFBWBTRVRRKEHLQAQQXECBWTEELWVCNBGCETCGVEKBXOTHAZTHAMATLKMWTEDRBZYDHFBOZHXDHURUAJTBGHXRLAEZOLATMIWZFZRKJVHQBOOTGLAYGRMKPNEOCFKP'''

alphabet=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')

def encrypt(message,key,shift,cipher=True):
    keydict={}
    out=''
    for i in range(26):
        keydict[key[i]]=i
    for x in range(len(message)):
        if message[x] in alphabet:
            if cipher==True:
                if x==0:
                    out+=key[(keydict[message[x]]+shift)%26]
                else:
                    out+=key[(keydict[message[x]]+keydict[message[x-1]]+1)%26]
            elif cipher==False:
                if x==0:
                    out+=key[(keydict[message[x]]-shift)%26]
                else:
                    out+=key[(keydict[message[x]]-keydict[out[x-1]]-1)%26]
    return out

def findkey(crib,cipher):
    bestkey={}
    for l1 in range(0,25):
        for l2 in range(l1+1,26):
            for p1 in range(26):
                for p2 in range(26):
                    if p1==p2:
                        continue
                    else:
                        result,key=keyex(l1,l2,p1,p2,crib,cipher)
                        if result==True:
                            return key
                        elif result==False and key!=None:
                            if len(key)>len(bestkey):
                                bestkey=key
                                print(bestkey)

def keyex(l1,l2,p1,p2,crib,cipher):
    key={}
    for i in range(26):
        key['-']=i
    key[alphabet[l1]]=p1
    key[alphabet[l2]]=p2
    change=True
    while change==True:
        change=False
        for i in range(0,len(crib)-1):
            pl1=crib[i]
            pl2=crib[i+1]
            cl=cipher[i+1]
            if pl1 in key and pl2 in key and cl in key:
                if (key[pl1]+key[pl2])%26!=key[cl]:
                    return False,None
            elif pl1 in key and pl2 in key and cl not in key:
                key[cl]=(key[pl1]+key[pl2])%26
                change=True
            elif pl1 not in key and pl2 in key and cl in key:
                key[pl1]=(key[cl]-key[pl2])%26
                change=True
            elif pl1 in key and pl2 not in key and cl in key:
                key[pl2]=(key[cl]-key[pl1])%26
                change=True
    if len(key)<26:
        return False,key
    for i in key.values():
        if list(key.values()).count(i)>1:
            return False,None
    else:
        return True,key
